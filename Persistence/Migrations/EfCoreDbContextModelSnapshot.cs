// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(EfCoreDbContext))]
    partial class EfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TodoApp.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Stand Battles",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fashion Choices",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Memorable Quotes",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Unforgettable Villains",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Meme Wars",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("TodoApp.Domain.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Every time I walk into a room, I must strike a pose.",
                            EndDate = new DateTime(2024, 11, 10, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2616),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2592),
                            Title = "Learn how to pose dramatically",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3d55c615-1a1e-41ba-b5fd-4b6057d1c526"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Must come up with a clever scheme.",
                            EndDate = new DateTime(2024, 11, 8, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2671),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2670),
                            Title = "Plan the ultimate revenge against Jotaro",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b85c1194-e595-4c35-aece-e3545680c80e"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Use his face in the next viral meme.",
                            EndDate = new DateTime(2024, 11, 6, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2677),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2676),
                            Title = "Create a meme with Rohan",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1d2650fd-92ec-48e2-9bb2-1598c879f848"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Did someone eat it or did a Stand steal it?",
                            EndDate = new DateTime(2024, 11, 4, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2684),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2681),
                            Title = "Investigate the mystery of the missing pizza",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "03e2653b-1614-44c4-9846-2c9513d6cebc"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Make sure it includes a strong villain.",
                            EndDate = new DateTime(2024, 11, 13, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2688),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2688),
                            Title = "Write a new chapter for my manga",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1d2650fd-92ec-48e2-9bb2-1598c879f848"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It’s about time my Stand helped with chores!",
                            EndDate = new DateTime(2024, 11, 5, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2733),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2732),
                            Title = "Train my Stand to do the dishes",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3d55c615-1a1e-41ba-b5fd-4b6057d1c526"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need to prove my style is superior!",
                            EndDate = new DateTime(2024, 11, 6, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2736),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2736),
                            Title = "Have a fashion showdown with Jotaro",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "73ba6117-3056-4979-b3cb-adcc1d584c13"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "No one messes with a Joestar’s food!",
                            EndDate = new DateTime(2024, 11, 4, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2741),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2740),
                            Title = "Find out who stole my spaghetti",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3d55c615-1a1e-41ba-b5fd-4b6057d1c526"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Need material for the next meme.",
                            EndDate = new DateTime(2024, 11, 8, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2744),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2743),
                            Title = "Record Dio's best quotes",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b85c1194-e595-4c35-aece-e3545680c80e"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "We need to strengthen our bond.",
                            EndDate = new DateTime(2024, 11, 7, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2747),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2747),
                            Title = "Discuss friendship with Kakyoin",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "02f298e2-b656-4fcf-935c-8ce80df18aac"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Use all my JoJo experiences for laughs.",
                            EndDate = new DateTime(2024, 11, 10, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2751),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2750),
                            Title = "Start a Stand-up comedy routine",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "73ba6117-3056-4979-b3cb-adcc1d584c13"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Let’s see who has the best hair!",
                            EndDate = new DateTime(2024, 11, 6, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2753),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2752),
                            Title = "Challenge Josuke to a hair-styling contest",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "03e2653b-1614-44c4-9846-2c9513d6cebc"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Make it as bizarre as possible!",
                            EndDate = new DateTime(2024, 11, 17, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2755),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2755),
                            Title = "Create a JoJo-themed escape room",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "1d2650fd-92ec-48e2-9bb2-1598c879f848"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Must include lots of drama and betrayal.",
                            EndDate = new DateTime(2024, 11, 13, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2758),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2757),
                            Title = "Write an epic ballad about my adventures",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "340518f6-0e7e-4c2a-9523-d0f08ef47b60"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "The winner gets a pizza!",
                            EndDate = new DateTime(2024, 11, 18, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2799),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2761),
                            Title = "Host a Stand Battle tournament",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "b85c1194-e595-4c35-aece-e3545680c80e"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It should be something cool and over-the-top!",
                            EndDate = new DateTime(2024, 11, 11, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2815),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2814),
                            Title = "Develop a new Stand ability",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "e37fb095-73e2-480d-9cc7-186030d0fba8"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 5,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Make it catchy and powerful!",
                            EndDate = new DateTime(2024, 11, 9, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2823),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2823),
                            Title = "Compose a theme song for my Stand",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "73ba6117-3056-4979-b3cb-adcc1d584c13"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Time to prove my strength!",
                            EndDate = new DateTime(2024, 11, 7, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2827),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2826),
                            Title = "Have a showdown with a rival Stand user",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "8ef268f9-c05e-4f12-93f2-71f89bc598cd"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 2,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It needs to be legendary!",
                            EndDate = new DateTime(2024, 11, 15, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2831),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2831),
                            Title = "Create a cosplay for the next convention",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "340518f6-0e7e-4c2a-9523-d0f08ef47b60"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "I need to find some cool artifacts!",
                            EndDate = new DateTime(2024, 11, 23, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2924),
                            IsDone = false,
                            StartDate = new DateTime(2024, 11, 3, 22, 8, 31, 327, DateTimeKind.Local).AddTicks(2923),
                            Title = "Plan a trip to the Joestar family mansion",
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3d55c615-1a1e-41ba-b5fd-4b6057d1c526"
                        });
                });

            modelBuilder.Entity("TodoApp.Domain.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "3d55c615-1a1e-41ba-b5fd-4b6057d1c526",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "060b897f-93bc-4271-930c-c50f0012a946",
                            Email = "joseph@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKCPZ8q0INV9NmZNXvN57rjYvFVi+/IvQXiabJYitmiEfvHVN0FvPTrMUyyYslRC9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "53e03030-779e-4be2-a0ea-f08a5e963aef",
                            TwoFactorEnabled = false,
                            UserName = "joseph",
                            FirstName = "Joseph",
                            LastName = "Joestar"
                        },
                        new
                        {
                            Id = "73ba6117-3056-4979-b3cb-adcc1d584c13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2bcd7c5-34e0-477f-acb6-9c56328c95bb",
                            Email = "jotaro@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL9yR7g/2Nw9ICS4zLRYY20rX/bo7gjDG53/bP8dI+AQpRZe6Jee5YxedVJWnylS9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fc6e88e-a594-4cea-acb3-aead35156c01",
                            TwoFactorEnabled = false,
                            UserName = "jotaro",
                            FirstName = "Jotaro",
                            LastName = "Kujo"
                        },
                        new
                        {
                            Id = "b85c1194-e595-4c35-aece-e3545680c80e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77c1ee1e-3cf2-4e2d-ae0d-bb02e7e2f1b9",
                            Email = "dio@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEL4a9Hetk98myFogpjX6SHYnvoATTqHTecfvXr6UEvQH7WZkQglGtjbYvz8NTK12cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a23e6d9-68be-4363-a866-34f26a5c868e",
                            TwoFactorEnabled = false,
                            UserName = "dio",
                            FirstName = "Dio",
                            LastName = "Brando"
                        },
                        new
                        {
                            Id = "e37fb095-73e2-480d-9cc7-186030d0fba8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "505cba24-c6fe-4c34-8054-9194b055e61b",
                            Email = "giorno@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIgoujgtuENvbnFU7Dmrf4+gtOOSOuzu3TwXtxOWZFAjDp/ipVEN/RkPC5xPXVy7+g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db7f66df-69d8-43ae-93c7-2bbc8534d9c2",
                            TwoFactorEnabled = false,
                            UserName = "giorno",
                            FirstName = "Giorno",
                            LastName = "Giovanna"
                        },
                        new
                        {
                            Id = "03e2653b-1614-44c4-9846-2c9513d6cebc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52ad4a45-3dba-4b03-8853-7c127d0b6566",
                            Email = "josuke@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEE/eJMwfk3oamsjokWlk/3cVwJl1dqsrdsf7t+hVJ3XhHcM+UEugh786nt50LvlZ1Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c2d8190-c455-4e7b-a773-2b78ec194539",
                            TwoFactorEnabled = false,
                            UserName = "josuke",
                            FirstName = "Josuke",
                            LastName = "Higashikata"
                        },
                        new
                        {
                            Id = "8ef268f9-c05e-4f12-93f2-71f89bc598cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1b6f85e-f9de-4c40-b6c2-2fb9e8a8ca31",
                            Email = "jonathan@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEH5KBqOpde+xtIsxO8QHadGOs0KNASb84HQdbJzsIZBRrsRQsp5M7FjLPjUOODmd8A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "641bc86b-6384-4d8c-b4a7-cc381503f07f",
                            TwoFactorEnabled = false,
                            UserName = "jonathan",
                            FirstName = "Jonathan",
                            LastName = "Joestar"
                        },
                        new
                        {
                            Id = "340518f6-0e7e-4c2a-9523-d0f08ef47b60",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a451d10-2c28-441d-99ac-31560a5f0376",
                            Email = "bruno@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEPxOR127xwmGLAuwj4pzIlCB2+aBYHH7RNPHLMto6e+3KZH6CnJfpgZzpzbPtILerA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc6155a2-5388-40bf-893d-02fba5bcaf5d",
                            TwoFactorEnabled = false,
                            UserName = "bruno",
                            FirstName = "Bruno",
                            LastName = "Bucciarati"
                        },
                        new
                        {
                            Id = "1d2650fd-92ec-48e2-9bb2-1598c879f848",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "615d54df-df9c-4776-b1ab-91417a7b5b4c",
                            Email = "rohan@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENkgLJQlxlCESTQBFx8+n3x8LjpTsmEnG212X5bdKlXjQSxjgtUcEwH3jESJ5fa2Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d09bc2db-7702-4746-b73b-7d7ccb287e7d",
                            TwoFactorEnabled = false,
                            UserName = "rohan",
                            FirstName = "Rohan",
                            LastName = "Kishibe"
                        },
                        new
                        {
                            Id = "02f298e2-b656-4fcf-935c-8ce80df18aac",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91e693ab-d566-4dc7-97dc-ba2f7b4d1e07",
                            Email = "kakyoin@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEGh/5VvtOV+Adk9bzUBq+kUN5qPITrM6QPOoH0XEudxulWPAjI9zHKjD3Uyz5YS0gA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c80314f6-def2-43bb-abda-6531cdd48dbe",
                            TwoFactorEnabled = false,
                            UserName = "kakyoin",
                            FirstName = "Kakyoin",
                            LastName = "Noriaki"
                        },
                        new
                        {
                            Id = "c2c4fd3a-f4d5-4f9b-9f56-6e92cb6debd7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e9f4b00-d135-4305-b54d-c21dd7fc8c5a",
                            Email = "polnareff@jojo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHTygIshcbIgtl07lGsWeszgHE5Ahh6AY0NBmoKHqu44KkO/cD25wKE+7XLLhh+Zog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "274663a7-3c95-4ea5-8ead-8f1d37ec366f",
                            TwoFactorEnabled = false,
                            UserName = "polnareff",
                            FirstName = "Jean Pierre",
                            LastName = "Polnareff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TodoApp.Domain.Models.Todo", b =>
                {
                    b.HasOne("TodoApp.Domain.Models.Category", "Category")
                        .WithMany("Todos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TodoApp.Domain.Models.User", "User")
                        .WithMany("Todos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TodoApp.Domain.Models.Category", b =>
                {
                    b.Navigation("Todos");
                });

            modelBuilder.Entity("TodoApp.Domain.Models.User", b =>
                {
                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
